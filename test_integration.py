#!/usr/bin/env python3
"""
Integration Test for AI Band Plugin with ai-band-backend

This script tests the complete integration between the ai-band-backend
and the ai-band-plugin by:
1. Generating MIDI files using the backend
2. Testing that the plugin can load and process them
3. Validating the output format compatibility

Prerequisites:
- ai-band-backend must be available (either in ../ai-band-backend or in PATH)
- Python with required dependencies (mido, pretty_midi, numpy)
- AI Band Plugin test executable built
"""

import os
import sys
import subprocess
import tempfile
import shutil
from pathlib import Path
import json

def find_ai_band_backend():
    """Find the ai-band-backend directory."""
    # Check common locations
    possible_paths = [
        Path("../ai-band-backend"),
        Path("../../ai-band-backend"),
        Path.cwd().parent / "ai-band-backend",
    ]
    
    for path in possible_paths:
        if path.exists() and (path / "src" / "main.py").exists():
            return path
    
    return None

def run_backend_generation(backend_path, output_dir):
    """Run ai-band-backend to generate test MIDI files."""
    print("Running ai-band-backend to generate test files...")
    
    # Create a simple test script to generate files
    test_script = f"""
import sys
sys.path.append('{backend_path / "src"}')

from chord_detection import ChordDetector
from midi_generator import MidiGenerator
import os

# Test chord progression
chords = [
    {{"chord": "C", "start_time": 0.0, "duration": 2.0}},
    {{"chord": "Am", "start_time": 2.0, "duration": 2.0}},
    {{"chord": "F", "start_time": 4.0, "duration": 2.0}},
    {{"chord": "G", "start_time": 6.0, "duration": 2.0}}
]

# Initialize components
detector = ChordDetector()
generator = MidiGenerator()

# Generate tracks
print("Generating bass track...")
bass_midi = generator.generate_bass_track(chords, tempo=120, key="C")

print("Generating drum track...")
drum_midi = generator.generate_drum_track(chords, tempo=120, duration=8.0)

# Save files
os.makedirs("{output_dir}", exist_ok=True)
bass_file = "{output_dir}/bass_track.mid"
drum_file = "{output_dir}/drum_track.mid"

bass_midi.write(bass_file)
drum_midi.write(drum_file)

print(f"Files saved:")
print(f"  Bass: {{bass_file}}")
print(f"  Drum: {{drum_file}}")

# Create metadata file
metadata = {{
    "bass_file": bass_file,
    "drum_file": drum_file,
    "tempo": 120,
    "key": "C",
    "duration": 8.0,
    "chord_progression": chords
}}

with open("{output_dir}/metadata.json", "w") as f:
    json.dump(metadata, f, indent=2)

print("Generation complete!")
"""
    
    # Write and execute the test script
    script_file = output_dir / "generate_test.py"
    script_file.write_text(test_script)
    
    try:
        result = subprocess.run([
            sys.executable, str(script_file)
        ], capture_output=True, text=True, cwd=backend_path)
        
        if result.returncode != 0:
            print(f"Backend generation failed:")
            print(f"STDOUT: {result.stdout}")
            print(f"STDERR: {result.stderr}")
            return False
        
        print("Backend generation successful!")
        print(result.stdout)
        return True
        
    except Exception as e:
        print(f"Error running backend: {e}")
        return False

def find_plugin_test_exe():
    """Find the plugin test executable."""
    possible_paths = [
        Path("build-tests/Debug/AIBandPluginTests.exe"),
        Path("build-tests/AIBandPluginTests.exe"),
        Path("build-tests/AIBandPluginTests_artefacts/Debug/AIBandPluginTests.exe"),
        Path("build/Debug/AIBandPluginTests.exe"),
        Path("build/AIBandPluginTests.exe"),
    ]
    
    for path in possible_paths:
        if path.exists():
            return path
    
    return None

def test_plugin_with_backend_files(test_exe, midi_dir):
    """Test the plugin with files generated by the backend."""
    print("Testing plugin with backend-generated files...")
    
    # Check that required files exist
    bass_file = midi_dir / "bass_track.mid"
    drum_file = midi_dir / "drum_track.mid"
    metadata_file = midi_dir / "metadata.json"
    
    if not all(f.exists() for f in [bass_file, drum_file, metadata_file]):
        print("Error: Required files not found in output directory")
        return False
    
    # Load metadata
    with open(metadata_file) as f:
        metadata = json.load(f)
    
    print(f"Testing with files:")
    print(f"  Bass: {bass_file}")
    print(f"  Drum: {drum_file}")
    print(f"  Tempo: {metadata['tempo']} BPM")
    print(f"  Duration: {metadata['duration']} beats")
    
    # Run plugin tests
    try:
        result = subprocess.run([
            str(test_exe), "--suite", "Integration"
        ], capture_output=True, text=True)
        
        print("Plugin test output:")
        print(result.stdout)
        
        if result.stderr:
            print("Plugin test errors:")
            print(result.stderr)
        
        if result.returncode == 0:
            print("âœ“ Plugin tests passed!")
            return True
        else:
            print("âœ— Plugin tests failed!")
            return False
            
    except Exception as e:
        print(f"Error running plugin tests: {e}")
        return False

def validate_midi_compatibility(midi_dir):
    """Validate that generated MIDI files are compatible with plugin expectations."""
    print("Validating MIDI file compatibility...")
    
    try:
        import mido
    except ImportError:
        print("Warning: mido not available, skipping detailed MIDI validation")
        return True
    
    bass_file = midi_dir / "bass_track.mid"
    drum_file = midi_dir / "drum_track.mid"
    
    # Check bass file
    try:
        bass_midi = mido.MidiFile(str(bass_file))
        print(f"âœ“ Bass MIDI file valid: {len(bass_midi.tracks)} tracks, {bass_midi.ticks_per_beat} ticks/beat")
        
        # Check for bass events
        bass_events = sum(len(track) for track in bass_midi.tracks)
        print(f"  Bass events: {bass_events}")
        
    except Exception as e:
        print(f"âœ— Bass MIDI file invalid: {e}")
        return False
    
    # Check drum file
    try:
        drum_midi = mido.MidiFile(str(drum_file))
        print(f"âœ“ Drum MIDI file valid: {len(drum_midi.tracks)} tracks, {drum_midi.ticks_per_beat} ticks/beat")
        
        # Check for drum events
        drum_events = sum(len(track) for track in drum_midi.tracks)
        print(f"  Drum events: {drum_events}")
        
    except Exception as e:
        print(f"âœ— Drum MIDI file invalid: {e}")
        return False
    
    return True

def main():
    """Run the complete integration test."""
    print("AI Band Plugin <-> ai-band-backend Integration Test")
    print("=" * 55)
    
    # Step 1: Find ai-band-backend
    backend_path = find_ai_band_backend()
    if not backend_path:
        print("Error: ai-band-backend not found!")
        print("Please ensure ai-band-backend is in a sibling directory")
        print("or adjust the search paths in this script.")
        return False
    
    print(f"âœ“ Found ai-band-backend at: {backend_path}")
    
    # Step 2: Find plugin test executable
    test_exe = find_plugin_test_exe()
    if not test_exe:
        print("Error: Plugin test executable not found!")
        print("Please build the tests first by running:")
        print("  cmake .. -DBUILD_TESTS=ON")
        print("  cmake --build . --target AIBandPluginTests")
        return False
    
    print(f"âœ“ Found plugin test executable at: {test_exe}")
    
    # Step 3: Create temporary directory for test files
    with tempfile.TemporaryDirectory() as temp_dir:
        output_dir = Path(temp_dir) / "ai_band_output"
        output_dir.mkdir()
        
        print(f"âœ“ Created test directory: {output_dir}")
        
        # Step 4: Generate MIDI files using backend
        if not run_backend_generation(backend_path, output_dir):
            print("âœ— Backend generation failed!")
            return False
        
        # Step 5: Validate MIDI file compatibility
        if not validate_midi_compatibility(output_dir):
            print("âœ— MIDI compatibility validation failed!")
            return False
        
        # Step 6: Test plugin with generated files
        if not test_plugin_with_backend_files(test_exe, output_dir):
            print("âœ— Plugin testing failed!")
            return False
    
    print("")
    print("=" * 55)
    print("ðŸŽ‰ INTEGRATION TEST PASSED! ðŸŽ‰")
    print("")
    print("The ai-band-backend and ai-band-plugin work together correctly!")
    print("You can now:")
    print("1. Use the backend to generate MIDI files")
    print("2. Load them in the plugin")
    print("3. Play AI-generated accompaniment in your DAW")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
